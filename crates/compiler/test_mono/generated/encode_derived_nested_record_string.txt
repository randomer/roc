procedure #Derived.0 (#Derived.1):
    let #Derived_gen.2 : {Str} = Struct {#Derived.1};
    let #Derived_gen.1 : Str = StructAtIndex 0 #Derived_gen.2;
    inc #Derived_gen.1;
    dec #Derived_gen.2;
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived_gen.11 : {Str} = Struct {#Attr.12};
    let #Derived.1 : Str = StructAtIndex 0 #Derived_gen.11;
    inc #Derived.1;
    dec #Derived_gen.11;
    let #Derived_gen.8 : Str = "a";
    let #Derived_gen.9 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.7 : {Str, Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.6 : List {Str, Str} = Array [#Derived_gen.7];
    let #Derived_gen.5 : List {Str, Str} = CallByName Json.20 #Derived_gen.6;
    let #Derived_gen.4 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.5 #Derived.4;
    ret #Derived_gen.4;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.18 : {Str} = Struct {#Derived.6};
    let #Derived_gen.17 : Str = StructAtIndex 0 #Derived_gen.18;
    inc #Derived_gen.17;
    dec #Derived_gen.18;
    let #Derived_gen.16 : Str = CallByName Encode.22 #Derived_gen.17;
    ret #Derived_gen.16;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived_gen.27 : {Str} = Struct {#Attr.12};
    let #Derived.6 : Str = StructAtIndex 0 #Derived_gen.27;
    inc #Derived.6;
    dec #Derived_gen.27;
    let #Derived_gen.24 : Str = "b";
    let #Derived_gen.25 : Str = CallByName Json.18 #Derived.6;
    let #Derived_gen.23 : {Str, Str} = Struct {#Derived_gen.24, #Derived_gen.25};
    let #Derived_gen.22 : List {Str, Str} = Array [#Derived_gen.23];
    let #Derived_gen.21 : List {Str, Str} = CallByName Json.20 #Derived_gen.22;
    let #Derived_gen.20 : List U8 = CallByName Encode.23 #Derived.8 #Derived_gen.21 #Derived.9;
    ret #Derived_gen.20;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.103 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.115 : List U8 = CallByName #Derived.7 Encode.94 Encode.96 Encode.102;
    ret Encode.115;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.125 : List U8 = CallByName Json.103 Encode.94 Encode.96 Encode.102;
    ret Encode.125;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.128 : List U8 = CallByName Json.87 Encode.94 Encode.96 Encode.102;
    ret Encode.128;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.318 : {} = Struct {};
    ret Json.318;

procedure Json.103 (Json.104, Json.321, #Attr.12):
    let Json.356 : {List {Str, Str}} = Struct {#Attr.12};
    let Json.102 : List {Str, Str} = StructAtIndex 0 Json.356;
    inc Json.102;
    dec Json.356;
    let Json.355 : I32 = 123i64;
    let Json.354 : U8 = CallByName Num.123 Json.355;
    let Json.106 : List U8 = CallByName List.4 Json.104 Json.354;
    let Json.353 : U64 = CallByName List.6 Json.102;
    let Json.330 : {List U8, U64} = Struct {Json.106, Json.353};
    let Json.331 : {} = Struct {};
    let Json.329 : {List U8, U64} = CallByName List.18 Json.102 Json.330 Json.331;
    dec Json.102;
    let Json.108 : List U8 = StructAtIndex 0 Json.329;
    inc Json.108;
    dec Json.329;
    let Json.328 : I32 = 125i64;
    let Json.327 : U8 = CallByName Num.123 Json.328;
    let Json.326 : List U8 = CallByName List.4 Json.108 Json.327;
    ret Json.326;

procedure Json.103 (Json.104, Json.321, #Attr.12):
    let Json.402 : {List {Str, Str}} = Struct {#Attr.12};
    let Json.102 : List {Str, Str} = StructAtIndex 0 Json.402;
    inc Json.102;
    dec Json.402;
    let Json.401 : I32 = 123i64;
    let Json.400 : U8 = CallByName Num.123 Json.401;
    let Json.106 : List U8 = CallByName List.4 Json.104 Json.400;
    let Json.399 : U64 = CallByName List.6 Json.102;
    let Json.376 : {List U8, U64} = Struct {Json.106, Json.399};
    let Json.377 : {} = Struct {};
    let Json.375 : {List U8, U64} = CallByName List.18 Json.102 Json.376 Json.377;
    dec Json.102;
    let Json.108 : List U8 = StructAtIndex 0 Json.375;
    inc Json.108;
    dec Json.375;
    let Json.374 : I32 = 125i64;
    let Json.373 : U8 = CallByName Num.123 Json.374;
    let Json.372 : List U8 = CallByName List.4 Json.108 Json.373;
    ret Json.372;

procedure Json.105 (Json.324, Json.325):
    let Json.111 : Str = StructAtIndex 0 Json.325;
    inc Json.111;
    let Json.112 : Str = StructAtIndex 1 Json.325;
    inc Json.112;
    dec Json.325;
    let Json.109 : List U8 = StructAtIndex 0 Json.324;
    inc Json.109;
    let Json.110 : U64 = StructAtIndex 1 Json.324;
    dec Json.324;
    let Json.352 : I32 = 34i64;
    let Json.351 : U8 = CallByName Num.123 Json.352;
    let Json.349 : List U8 = CallByName List.4 Json.109 Json.351;
    let Json.350 : List U8 = CallByName Str.12 Json.111;
    let Json.346 : List U8 = CallByName List.8 Json.349 Json.350;
    let Json.348 : I32 = 34i64;
    let Json.347 : U8 = CallByName Num.123 Json.348;
    let Json.343 : List U8 = CallByName List.4 Json.346 Json.347;
    let Json.345 : I32 = 58i64;
    let Json.344 : U8 = CallByName Num.123 Json.345;
    let Json.341 : List U8 = CallByName List.4 Json.343 Json.344;
    let Json.342 : {} = Struct {};
    let Json.113 : List U8 = CallByName Encode.23 Json.341 Json.112 Json.342;
    joinpoint Json.336 Json.114:
        let Json.334 : U64 = 1i64;
        let Json.333 : U64 = CallByName Num.20 Json.110 Json.334;
        let Json.332 : {List U8, U64} = Struct {Json.114, Json.333};
        ret Json.332;
    in
    let Json.340 : U64 = 1i64;
    let Json.337 : Int1 = CallByName Num.24 Json.110 Json.340;
    if Json.337 then
        let Json.339 : I32 = 44i64;
        let Json.338 : U8 = CallByName Num.123 Json.339;
        let Json.335 : List U8 = CallByName List.4 Json.113 Json.338;
        jump Json.336 Json.335;
    else
        jump Json.336 Json.113;

procedure Json.105 (Json.324, Json.325):
    let Json.111 : Str = StructAtIndex 0 Json.325;
    inc Json.111;
    let Json.112 : Str = StructAtIndex 1 Json.325;
    inc Json.112;
    dec Json.325;
    let Json.109 : List U8 = StructAtIndex 0 Json.324;
    inc Json.109;
    let Json.110 : U64 = StructAtIndex 1 Json.324;
    dec Json.324;
    let Json.398 : I32 = 34i64;
    let Json.397 : U8 = CallByName Num.123 Json.398;
    let Json.395 : List U8 = CallByName List.4 Json.109 Json.397;
    let Json.396 : List U8 = CallByName Str.12 Json.111;
    let Json.392 : List U8 = CallByName List.8 Json.395 Json.396;
    let Json.394 : I32 = 34i64;
    let Json.393 : U8 = CallByName Num.123 Json.394;
    let Json.389 : List U8 = CallByName List.4 Json.392 Json.393;
    let Json.391 : I32 = 58i64;
    let Json.390 : U8 = CallByName Num.123 Json.391;
    let Json.387 : List U8 = CallByName List.4 Json.389 Json.390;
    let Json.388 : {} = Struct {};
    let Json.113 : List U8 = CallByName Encode.23 Json.387 Json.112 Json.388;
    joinpoint Json.382 Json.114:
        let Json.380 : U64 = 1i64;
        let Json.379 : U64 = CallByName Num.20 Json.110 Json.380;
        let Json.378 : {List U8, U64} = Struct {Json.114, Json.379};
        ret Json.378;
    in
    let Json.386 : U64 = 1i64;
    let Json.383 : Int1 = CallByName Num.24 Json.110 Json.386;
    if Json.383 then
        let Json.385 : I32 = 44i64;
        let Json.384 : U8 = CallByName Num.123 Json.385;
        let Json.381 : List U8 = CallByName List.4 Json.113 Json.384;
        jump Json.382 Json.381;
    else
        jump Json.382 Json.113;

procedure Json.18 (Json.86):
    let Json.370 : {Str} = Struct {Json.86};
    let Json.368 : Str = StructAtIndex 0 Json.370;
    inc Json.368;
    dec Json.370;
    let Json.367 : Str = CallByName Encode.22 Json.368;
    ret Json.367;

procedure Json.20 (Json.102):
    let Json.322 : {List {Str, Str}} = Struct {Json.102};
    let Json.320 : List {Str, Str} = StructAtIndex 0 Json.322;
    inc Json.320;
    dec Json.322;
    let Json.319 : List {Str, Str} = CallByName Encode.22 Json.320;
    ret Json.319;

procedure Json.20 (Json.102):
    let Json.366 : {List {Str, Str}} = Struct {Json.102};
    let Json.364 : List {Str, Str} = StructAtIndex 0 Json.366;
    inc Json.364;
    dec Json.366;
    let Json.363 : List {Str, Str} = CallByName Encode.22 Json.364;
    ret Json.363;

procedure Json.87 (Json.88, Json.369, #Attr.12):
    let Json.412 : {Str} = Struct {#Attr.12};
    let Json.86 : Str = StructAtIndex 0 Json.412;
    inc Json.86;
    dec Json.412;
    let Json.411 : I32 = 34i64;
    let Json.410 : U8 = CallByName Num.123 Json.411;
    let Json.408 : List U8 = CallByName List.4 Json.88 Json.410;
    let Json.409 : List U8 = CallByName Str.12 Json.86;
    let Json.405 : List U8 = CallByName List.8 Json.408 Json.409;
    let Json.407 : I32 = 34i64;
    let Json.406 : U8 = CallByName Num.123 Json.407;
    let Json.404 : List U8 = CallByName List.4 Json.405 Json.406;
    ret Json.404;

procedure List.133 (List.134, List.135, #Attr.12):
    let List.436 : {{}} = Struct {#Attr.12};
    let List.132 : {} = StructAtIndex 0 List.436;
    let List.435 : {List U8, U64} = CallByName Json.105 List.134 List.135;
    let List.434 : [C [], C {List U8, U64}] = TagId(1) List.435;
    ret List.434;

procedure List.133 (List.134, List.135, #Attr.12):
    let List.519 : {{}} = Struct {#Attr.12};
    let List.132 : {} = StructAtIndex 0 List.519;
    let List.518 : {List U8, U64} = CallByName Json.105 List.134 List.135;
    let List.517 : [C [], C {List U8, U64}] = TagId(1) List.518;
    ret List.517;

procedure List.18 (List.130, List.131, List.132):
    let List.412 : {{}} = Struct {List.132};
    let List.411 : {} = StructAtIndex 0 List.412;
    let List.405 : [C [], C {List U8, U64}] = CallByName List.75 List.130 List.131 List.411;
    let List.408 : U8 = 1i64;
    let List.409 : U8 = GetTagId List.405;
    let List.410 : Int1 = lowlevel Eq List.408 List.409;
    if List.410 then
        let List.137 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.405;
        inc List.137;
        dec List.405;
        ret List.137;
    else
        let List.138 : [] = UnionAtIndex (Id 0) (Index 0) List.405;
        dec List.405;
        let List.407 : {List U8, U64} = CallByName List.69 List.138;
        ret List.407;

procedure List.18 (List.130, List.131, List.132):
    let List.494 : {{}} = Struct {List.132};
    let List.493 : {} = StructAtIndex 0 List.494;
    let List.487 : [C [], C {List U8, U64}] = CallByName List.75 List.130 List.131 List.493;
    let List.490 : U8 = 1i64;
    let List.491 : U8 = GetTagId List.487;
    let List.492 : Int1 = lowlevel Eq List.490 List.491;
    if List.492 then
        let List.137 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.487;
        inc List.137;
        dec List.487;
        ret List.137;
    else
        let List.138 : [] = UnionAtIndex (Id 0) (Index 0) List.487;
        dec List.487;
        let List.489 : {List U8, U64} = CallByName List.69 List.138;
        ret List.489;

procedure List.4 (List.101, List.102):
    let List.486 : U64 = 1i64;
    let List.485 : List U8 = CallByName List.70 List.101 List.486;
    let List.484 : List U8 = CallByName List.71 List.485 List.102;
    ret List.484;

procedure List.6 (#Attr.2):
    let List.385 : U64 = lowlevel ListLen #Attr.2;
    ret List.385;

procedure List.6 (#Attr.2):
    let List.414 : U64 = lowlevel ListLen #Attr.2;
    ret List.414;

procedure List.6 (#Attr.2):
    let List.497 : U64 = lowlevel ListLen #Attr.2;
    ret List.497;

procedure List.66 (#Attr.2, #Attr.3):
    let List.433 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.433;

procedure List.66 (#Attr.2, #Attr.3):
    let List.516 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.516;

procedure List.69 (#Attr.2):
    let List.500 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.500;

procedure List.70 (#Attr.2, #Attr.3):
    let List.499 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.499;

procedure List.71 (#Attr.2, #Attr.3):
    let List.498 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.498;

procedure List.75 (List.361, List.362, List.363):
    let List.419 : U64 = 0i64;
    let List.420 : U64 = CallByName List.6 List.361;
    let List.418 : [C [], C {List U8, U64}] = CallByName List.86 List.361 List.362 List.363 List.419 List.420;
    ret List.418;

procedure List.75 (List.361, List.362, List.363):
    let List.502 : U64 = 0i64;
    let List.503 : U64 = CallByName List.6 List.361;
    let List.501 : [C [], C {List U8, U64}] = CallByName List.86 List.361 List.362 List.363 List.502 List.503;
    ret List.501;

procedure List.8 (#Attr.2, #Attr.3):
    let List.496 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.496;

procedure List.86 (List.450, List.451, List.452, List.453, List.454):
    joinpoint List.421 List.364 List.365 List.366 List.367 List.368:
        let List.423 : Int1 = CallByName Num.22 List.367 List.368;
        if List.423 then
            let List.432 : {Str, Str} = CallByName List.66 List.364 List.367;
            let List.424 : [C [], C {List U8, U64}] = CallByName List.133 List.365 List.432 List.366;
            let List.429 : U8 = 1i64;
            let List.430 : U8 = GetTagId List.424;
            let List.431 : Int1 = lowlevel Eq List.429 List.430;
            if List.431 then
                let List.369 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.424;
                inc List.369;
                dec List.424;
                let List.427 : U64 = 1i64;
                let List.426 : U64 = CallByName Num.19 List.367 List.427;
                jump List.421 List.364 List.369 List.366 List.426 List.368;
            else
                let List.370 : [] = UnionAtIndex (Id 0) (Index 0) List.424;
                dec List.424;
                let List.428 : [C [], C {List U8, U64}] = TagId(0) List.370;
                ret List.428;
        else
            let List.422 : [C [], C {List U8, U64}] = TagId(1) List.365;
            ret List.422;
    in
    jump List.421 List.450 List.451 List.452 List.453 List.454;

procedure List.86 (List.533, List.534, List.535, List.536, List.537):
    joinpoint List.504 List.364 List.365 List.366 List.367 List.368:
        let List.506 : Int1 = CallByName Num.22 List.367 List.368;
        if List.506 then
            let List.515 : {Str, Str} = CallByName List.66 List.364 List.367;
            let List.507 : [C [], C {List U8, U64}] = CallByName List.133 List.365 List.515 List.366;
            let List.512 : U8 = 1i64;
            let List.513 : U8 = GetTagId List.507;
            let List.514 : Int1 = lowlevel Eq List.512 List.513;
            if List.514 then
                let List.369 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.507;
                inc List.369;
                dec List.507;
                let List.510 : U64 = 1i64;
                let List.509 : U64 = CallByName Num.19 List.367 List.510;
                jump List.504 List.364 List.369 List.366 List.509 List.368;
            else
                let List.370 : [] = UnionAtIndex (Id 0) (Index 0) List.507;
                dec List.507;
                let List.511 : [C [], C {List U8, U64}] = TagId(0) List.370;
                ret List.511;
        else
            let List.505 : [C [], C {List U8, U64}] = TagId(1) List.365;
            ret List.505;
    in
    jump List.504 List.533 List.534 List.535 List.536 List.537;

procedure Num.123 (#Attr.2):
    let Num.283 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.283;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.286 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.284 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.287 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.285;

procedure Str.12 (#Attr.2):
    let Str.219 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.219;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.211 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.211;

procedure Str.9 (Str.69):
    let Str.209 : U64 = 0i64;
    let Str.210 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.209 Str.210;
    let Str.206 : Int1 = StructAtIndex 2 Str.70;
    if Str.206 then
        let Str.208 : Str = StructAtIndex 1 Str.70;
        inc Str.208;
        dec Str.70;
        let Str.207 : [C {U64, U8}, C Str] = TagId(1) Str.208;
        ret Str.207;
    else
        let Str.204 : U8 = StructAtIndex 3 Str.70;
        let Str.205 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.203 : {U64, U8} = Struct {Str.205, Str.204};
        let Str.202 : [C {U64, U8}, C Str] = TagId(0) Str.203;
        ret Str.202;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
