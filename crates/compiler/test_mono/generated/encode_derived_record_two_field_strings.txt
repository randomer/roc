procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.11 : Str = "a";
    let #Derived_gen.13 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived_gen.13;
    let #Derived_gen.12 : Str = CallByName Json.18 #Derived_gen.13;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.8 : Str = "b";
    let #Derived_gen.10 : Str = StructAtIndex 1 #Derived.1;
    inc #Derived_gen.10;
    dec #Derived.1;
    let #Derived_gen.9 : Str = CallByName Json.18 #Derived_gen.10;
    let #Derived_gen.7 : {Str, Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.103 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : List U8 = CallByName Json.87 Encode.94 Encode.96 Encode.102;
    ret Encode.117;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str, Str} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.318 : {} = Struct {};
    ret Json.318;

procedure Json.103 (Json.104, Json.321, Json.102):
    let Json.360 : I32 = 123i64;
    let Json.359 : U8 = CallByName Num.123 Json.360;
    let Json.106 : List U8 = CallByName List.4 Json.104 Json.359;
    let Json.358 : U64 = CallByName List.6 Json.102;
    let Json.335 : {List U8, U64} = Struct {Json.106, Json.358};
    let Json.336 : {} = Struct {};
    let Json.334 : {List U8, U64} = CallByName List.18 Json.102 Json.335 Json.336;
    dec Json.102;
    let Json.108 : List U8 = StructAtIndex 0 Json.334;
    inc Json.108;
    dec Json.334;
    let Json.333 : I32 = 125i64;
    let Json.332 : U8 = CallByName Num.123 Json.333;
    let Json.331 : List U8 = CallByName List.4 Json.108 Json.332;
    ret Json.331;

procedure Json.105 (Json.329, Json.330):
    let Json.111 : Str = StructAtIndex 0 Json.330;
    inc Json.111;
    let Json.112 : Str = StructAtIndex 1 Json.330;
    inc Json.112;
    dec Json.330;
    let Json.109 : List U8 = StructAtIndex 0 Json.329;
    inc Json.109;
    let Json.110 : U64 = StructAtIndex 1 Json.329;
    dec Json.329;
    let Json.357 : I32 = 34i64;
    let Json.356 : U8 = CallByName Num.123 Json.357;
    let Json.354 : List U8 = CallByName List.4 Json.109 Json.356;
    let Json.355 : List U8 = CallByName Str.12 Json.111;
    let Json.351 : List U8 = CallByName List.8 Json.354 Json.355;
    let Json.353 : I32 = 34i64;
    let Json.352 : U8 = CallByName Num.123 Json.353;
    let Json.348 : List U8 = CallByName List.4 Json.351 Json.352;
    let Json.350 : I32 = 58i64;
    let Json.349 : U8 = CallByName Num.123 Json.350;
    let Json.346 : List U8 = CallByName List.4 Json.348 Json.349;
    let Json.347 : {} = Struct {};
    let Json.113 : List U8 = CallByName Encode.23 Json.346 Json.112 Json.347;
    joinpoint Json.341 Json.114:
        let Json.339 : U64 = 1i64;
        let Json.338 : U64 = CallByName Num.20 Json.110 Json.339;
        let Json.337 : {List U8, U64} = Struct {Json.114, Json.338};
        ret Json.337;
    in
    let Json.345 : U64 = 1i64;
    let Json.342 : Int1 = CallByName Num.24 Json.110 Json.345;
    if Json.342 then
        let Json.344 : I32 = 44i64;
        let Json.343 : U8 = CallByName Num.123 Json.344;
        let Json.340 : List U8 = CallByName List.4 Json.113 Json.343;
        jump Json.341 Json.340;
    else
        jump Json.341 Json.113;

procedure Json.18 (Json.86):
    let Json.325 : Str = CallByName Encode.22 Json.86;
    ret Json.325;

procedure Json.20 (Json.102):
    let Json.319 : List {Str, Str} = CallByName Encode.22 Json.102;
    ret Json.319;

procedure Json.87 (Json.88, Json.324, Json.86):
    let Json.369 : I32 = 34i64;
    let Json.368 : U8 = CallByName Num.123 Json.369;
    let Json.366 : List U8 = CallByName List.4 Json.88 Json.368;
    let Json.367 : List U8 = CallByName Str.12 Json.86;
    let Json.363 : List U8 = CallByName List.8 Json.366 Json.367;
    let Json.365 : I32 = 34i64;
    let Json.364 : U8 = CallByName Num.123 Json.365;
    let Json.362 : List U8 = CallByName List.4 Json.363 Json.364;
    ret Json.362;

procedure List.133 (List.134, List.135, List.132):
    let List.441 : {List U8, U64} = CallByName Json.105 List.134 List.135;
    let List.440 : [C [], C {List U8, U64}] = TagId(1) List.441;
    ret List.440;

procedure List.18 (List.130, List.131, List.132):
    let List.411 : [C [], C {List U8, U64}] = CallByName List.75 List.130 List.131 List.132;
    let List.414 : U8 = 1i64;
    let List.415 : U8 = GetTagId List.411;
    let List.416 : Int1 = lowlevel Eq List.414 List.415;
    if List.416 then
        let List.137 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.411;
        inc List.137;
        dec List.411;
        ret List.137;
    else
        let List.138 : [] = UnionAtIndex (Id 0) (Index 0) List.411;
        dec List.411;
        let List.413 : {List U8, U64} = CallByName List.69 List.138;
        ret List.413;

procedure List.4 (List.101, List.102):
    let List.410 : U64 = 1i64;
    let List.409 : List U8 = CallByName List.70 List.101 List.410;
    let List.408 : List U8 = CallByName List.71 List.409 List.102;
    ret List.408;

procedure List.6 (#Attr.2):
    let List.385 : U64 = lowlevel ListLen #Attr.2;
    ret List.385;

procedure List.6 (#Attr.2):
    let List.420 : U64 = lowlevel ListLen #Attr.2;
    ret List.420;

procedure List.66 (#Attr.2, #Attr.3):
    let List.439 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.439;

procedure List.69 (#Attr.2):
    let List.423 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.423;

procedure List.70 (#Attr.2, #Attr.3):
    let List.422 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.422;

procedure List.71 (#Attr.2, #Attr.3):
    let List.421 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.421;

procedure List.75 (List.361, List.362, List.363):
    let List.425 : U64 = 0i64;
    let List.426 : U64 = CallByName List.6 List.361;
    let List.424 : [C [], C {List U8, U64}] = CallByName List.86 List.361 List.362 List.363 List.425 List.426;
    ret List.424;

procedure List.8 (#Attr.2, #Attr.3):
    let List.419 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.419;

procedure List.86 (List.455, List.456, List.457, List.458, List.459):
    joinpoint List.427 List.364 List.365 List.366 List.367 List.368:
        let List.429 : Int1 = CallByName Num.22 List.367 List.368;
        if List.429 then
            let List.438 : {Str, Str} = CallByName List.66 List.364 List.367;
            let List.430 : [C [], C {List U8, U64}] = CallByName List.133 List.365 List.438 List.366;
            let List.435 : U8 = 1i64;
            let List.436 : U8 = GetTagId List.430;
            let List.437 : Int1 = lowlevel Eq List.435 List.436;
            if List.437 then
                let List.369 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.430;
                inc List.369;
                dec List.430;
                let List.433 : U64 = 1i64;
                let List.432 : U64 = CallByName Num.19 List.367 List.433;
                jump List.427 List.364 List.369 List.366 List.432 List.368;
            else
                let List.370 : [] = UnionAtIndex (Id 0) (Index 0) List.430;
                dec List.430;
                let List.434 : [C [], C {List U8, U64}] = TagId(0) List.370;
                ret List.434;
        else
            let List.428 : [C [], C {List U8, U64}] = TagId(1) List.365;
            ret List.428;
    in
    jump List.427 List.455 List.456 List.457 List.458 List.459;

procedure Num.123 (#Attr.2):
    let Num.264 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.264;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.265 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.265;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.266 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.266;

procedure Str.12 (#Attr.2):
    let Str.217 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.217;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.211 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.211;

procedure Str.9 (Str.69):
    let Str.209 : U64 = 0i64;
    let Str.210 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.209 Str.210;
    let Str.206 : Int1 = StructAtIndex 2 Str.70;
    if Str.206 then
        let Str.208 : Str = StructAtIndex 1 Str.70;
        inc Str.208;
        dec Str.70;
        let Str.207 : [C {U64, U8}, C Str] = TagId(1) Str.208;
        ret Str.207;
    else
        let Str.204 : U8 = StructAtIndex 3 Str.70;
        let Str.205 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.203 : {U64, U8} = Struct {Str.205, Str.204};
        let Str.202 : [C {U64, U8}, C Str] = TagId(0) Str.203;
        ret Str.202;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.12 : Str = "bar";
    let Test.9 : {Str, Str} = Struct {Test.11, Test.12};
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.9 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
