procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.18 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.21 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.3 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.117 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.87 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.318 : {} = Struct {};
    ret Json.318;

procedure Json.117 (Json.118, Json.321, #Attr.12):
    let Json.116 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.116;
    let Json.115 : Str = StructAtIndex 0 #Attr.12;
    inc Json.115;
    dec #Attr.12;
    let Json.362 : I32 = 123i64;
    let Json.361 : U8 = CallByName Num.123 Json.362;
    let Json.358 : List U8 = CallByName List.4 Json.118 Json.361;
    let Json.360 : I32 = 34i64;
    let Json.359 : U8 = CallByName Num.123 Json.360;
    let Json.356 : List U8 = CallByName List.4 Json.358 Json.359;
    let Json.357 : List U8 = CallByName Str.12 Json.115;
    let Json.353 : List U8 = CallByName List.8 Json.356 Json.357;
    let Json.355 : I32 = 34i64;
    let Json.354 : U8 = CallByName Num.123 Json.355;
    let Json.350 : List U8 = CallByName List.4 Json.353 Json.354;
    let Json.352 : I32 = 58i64;
    let Json.351 : U8 = CallByName Num.123 Json.352;
    let Json.347 : List U8 = CallByName List.4 Json.350 Json.351;
    let Json.349 : I32 = 91i64;
    let Json.348 : U8 = CallByName Num.123 Json.349;
    let Json.120 : List U8 = CallByName List.4 Json.347 Json.348;
    let Json.346 : U64 = CallByName List.6 Json.116;
    let Json.334 : {List U8, U64} = Struct {Json.120, Json.346};
    let Json.335 : {} = Struct {};
    let Json.333 : {List U8, U64} = CallByName List.18 Json.116 Json.334 Json.335;
    dec Json.116;
    let Json.122 : List U8 = StructAtIndex 0 Json.333;
    inc Json.122;
    dec Json.333;
    let Json.332 : I32 = 93i64;
    let Json.331 : U8 = CallByName Num.123 Json.332;
    let Json.328 : List U8 = CallByName List.4 Json.122 Json.331;
    let Json.330 : I32 = 125i64;
    let Json.329 : U8 = CallByName Num.123 Json.330;
    let Json.327 : List U8 = CallByName List.4 Json.328 Json.329;
    ret Json.327;

procedure Json.119 (Json.326, Json.125):
    let Json.123 : List U8 = StructAtIndex 0 Json.326;
    inc Json.123;
    let Json.124 : U64 = StructAtIndex 1 Json.326;
    dec Json.326;
    let Json.345 : {} = Struct {};
    let Json.126 : List U8 = CallByName Encode.23 Json.123 Json.125 Json.345;
    joinpoint Json.340 Json.127:
        let Json.338 : U64 = 1i64;
        let Json.337 : U64 = CallByName Num.20 Json.124 Json.338;
        let Json.336 : {List U8, U64} = Struct {Json.127, Json.337};
        ret Json.336;
    in
    let Json.344 : U64 = 1i64;
    let Json.341 : Int1 = CallByName Num.24 Json.124 Json.344;
    if Json.341 then
        let Json.343 : I32 = 44i64;
        let Json.342 : U8 = CallByName Num.123 Json.343;
        let Json.339 : List U8 = CallByName List.4 Json.126 Json.342;
        jump Json.340 Json.339;
    else
        jump Json.340 Json.126;

procedure Json.18 (Json.86):
    let Json.322 : Str = CallByName Encode.22 Json.86;
    ret Json.322;

procedure Json.21 (Json.115, Json.116):
    let Json.320 : {Str, List Str} = Struct {Json.115, Json.116};
    let Json.319 : {Str, List Str} = CallByName Encode.22 Json.320;
    ret Json.319;

procedure Json.87 (Json.88, Json.324, Json.86):
    let Json.371 : I32 = 34i64;
    let Json.370 : U8 = CallByName Num.123 Json.371;
    let Json.368 : List U8 = CallByName List.4 Json.88 Json.370;
    let Json.369 : List U8 = CallByName Str.12 Json.86;
    let Json.365 : List U8 = CallByName List.8 Json.368 Json.369;
    let Json.367 : I32 = 34i64;
    let Json.366 : U8 = CallByName Num.123 Json.367;
    let Json.364 : List U8 = CallByName List.4 Json.365 Json.366;
    ret Json.364;

procedure List.133 (List.134, List.135, List.132):
    let List.447 : {List U8, U64} = CallByName Json.119 List.134 List.135;
    let List.446 : [C [], C {List U8, U64}] = TagId(1) List.447;
    ret List.446;

procedure List.18 (List.130, List.131, List.132):
    let List.417 : [C [], C {List U8, U64}] = CallByName List.75 List.130 List.131 List.132;
    let List.420 : U8 = 1i64;
    let List.421 : U8 = GetTagId List.417;
    let List.422 : Int1 = lowlevel Eq List.420 List.421;
    if List.422 then
        let List.137 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.417;
        inc List.137;
        dec List.417;
        ret List.137;
    else
        let List.138 : [] = UnionAtIndex (Id 0) (Index 0) List.417;
        dec List.417;
        let List.419 : {List U8, U64} = CallByName List.69 List.138;
        ret List.419;

procedure List.4 (List.101, List.102):
    let List.416 : U64 = 1i64;
    let List.415 : List U8 = CallByName List.70 List.101 List.416;
    let List.414 : List U8 = CallByName List.71 List.415 List.102;
    ret List.414;

procedure List.6 (#Attr.2):
    let List.385 : U64 = lowlevel ListLen #Attr.2;
    ret List.385;

procedure List.6 (#Attr.2):
    let List.424 : U64 = lowlevel ListLen #Attr.2;
    ret List.424;

procedure List.66 (#Attr.2, #Attr.3):
    let List.445 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.445;

procedure List.69 (#Attr.2):
    let List.429 : {List U8, U64} = lowlevel Unreachable #Attr.2;
    ret List.429;

procedure List.70 (#Attr.2, #Attr.3):
    let List.428 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.428;

procedure List.71 (#Attr.2, #Attr.3):
    let List.427 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.427;

procedure List.75 (List.361, List.362, List.363):
    let List.431 : U64 = 0i64;
    let List.432 : U64 = CallByName List.6 List.361;
    let List.430 : [C [], C {List U8, U64}] = CallByName List.86 List.361 List.362 List.363 List.431 List.432;
    ret List.430;

procedure List.8 (#Attr.2, #Attr.3):
    let List.426 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.426;

procedure List.86 (List.461, List.462, List.463, List.464, List.465):
    joinpoint List.433 List.364 List.365 List.366 List.367 List.368:
        let List.435 : Int1 = CallByName Num.22 List.367 List.368;
        if List.435 then
            let List.444 : Str = CallByName List.66 List.364 List.367;
            let List.436 : [C [], C {List U8, U64}] = CallByName List.133 List.365 List.444 List.366;
            let List.441 : U8 = 1i64;
            let List.442 : U8 = GetTagId List.436;
            let List.443 : Int1 = lowlevel Eq List.441 List.442;
            if List.443 then
                let List.369 : {List U8, U64} = UnionAtIndex (Id 1) (Index 0) List.436;
                inc List.369;
                dec List.436;
                let List.439 : U64 = 1i64;
                let List.438 : U64 = CallByName Num.19 List.367 List.439;
                jump List.433 List.364 List.369 List.366 List.438 List.368;
            else
                let List.370 : [] = UnionAtIndex (Id 0) (Index 0) List.436;
                dec List.436;
                let List.440 : [C [], C {List U8, U64}] = TagId(0) List.370;
                ret List.440;
        else
            let List.434 : [C [], C {List U8, U64}] = TagId(1) List.365;
            ret List.434;
    in
    jump List.433 List.461 List.462 List.463 List.464 List.465;

procedure Num.123 (#Attr.2):
    let Num.266 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.266;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.269 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.269;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.270 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.270;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.268;

procedure Str.12 (#Attr.2):
    let Str.217 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.217;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.211 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.211;

procedure Str.9 (Str.69):
    let Str.209 : U64 = 0i64;
    let Str.210 : U64 = CallByName List.6 Str.69;
    let Str.70 : {U64, Str, Int1, U8} = CallByName Str.48 Str.69 Str.209 Str.210;
    let Str.206 : Int1 = StructAtIndex 2 Str.70;
    if Str.206 then
        let Str.208 : Str = StructAtIndex 1 Str.70;
        inc Str.208;
        dec Str.70;
        let Str.207 : [C {U64, U8}, C Str] = TagId(1) Str.208;
        ret Str.207;
    else
        let Str.204 : U8 = StructAtIndex 3 Str.70;
        let Str.205 : U64 = StructAtIndex 0 Str.70;
        dec Str.70;
        let Str.203 : {U64, U8} = Struct {Str.205, Str.204};
        let Str.202 : [C {U64, U8}, C Str] = TagId(0) Str.203;
        ret Str.202;

procedure Test.0 ():
    let Test.12 : Str = "foo";
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.25 Test.12 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
